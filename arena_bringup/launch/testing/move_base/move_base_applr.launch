<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- Arguments -->
  <arg name="model" default="burger"/>
  <arg name="cmd_vel_topic" default="/cmd_vel" />
  <arg name="odom_topic" default="odom" />
  <arg name="move_forward_only" default="false"/>
  <arg name="namespace" />
  <!-- move_base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <param name="base_global_planner" type="string" value="navfn/NavfnROS" />
    <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
    <rosparam file="$(find arena-simulation-setup)/robot/$(arg model)/costmaps/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find arena-simulation-setup)/robot/$(arg model)/costmaps/global_costmap_params.yaml" command="load" />
    <rosparam>
      TrajectoryPlannerROS:

        # Robot Configuration Parameters
        acc_lim_x: 10.0
        acc_lim_theta:  20.0
      
        max_vel_x: 0.5
        min_vel_x: 0.1
      
        max_vel_theta: 1.57
        min_vel_theta: -1.57
        min_in_place_vel_theta: 0.314
      
        holonomic_robot: false
        escape_vel: -0.5
      
        # Goal Tolerance Parameters
        yaw_goal_tolerance: 0.157
        xy_goal_tolerance: 0.25
        latch_xy_goal_tolerance: false
      
        # Forward Simulation Parameters
        sim_time: 2.0
        sim_granularity: 0.02
        angular_sim_granularity: 0.02
        vx_samples: 6
        vtheta_samples: 20
        controller_frequency: 20.0
      
        # Trajectory scoring parameters
        meter_scoring: true # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default (false).
        occdist_scale:  0.1 #The weighting for how much the controller should attempt to avoid obstacles. default 0.01
        pdist_scale: 0.75  #     The weighting for how much the controller should stay close to the path it was given . default 0.6
        gdist_scale: 1.0 #     The weighting for how much the controller should attempt to reach its local goal, also controls speed  default 0.8
      
        heading_lookahead: 0.325  #How far to look ahead in meters when scoring different in-place-rotation trajectories
        heading_scoring: false  #Whether to score based on the robot's heading to the path or its distance from the path. default false
        heading_scoring_timestep: 0.8   #How far to look ahead in time in seconds along the simulated trajectory when using heading scoring (double, default: 0.8)
        dwa: true #Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
        simple_attractor: false
        publish_cost_grid_pc: true
      
        #Oscillation Prevention Parameters
        oscillation_reset_dist: 0.05 #How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)
        escape_reset_dist: 0.1
        escape_reset_theta: 0.1
    </rosparam>

    <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
    <remap from="odom" to="$(arg odom_topic)"/>
    <param name="controller_frequency" value="5.0" />
    <param name="controller_patience" value="15.0" />
    <param name="planner_frequency" value="5.0" />
    <param name="max_planning_retries" value="5.0" />
  </node>

  <node pkg="applr" type="test_param_policy.py" name="test_param_policy" output="screen"/>

</launch>
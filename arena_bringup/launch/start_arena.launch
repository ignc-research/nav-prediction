<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <env name="ARENA_TYPE" value="deployment" />


  <!-- FOR WEBAPP  -->
  <arg name="is_webapp_docker" default="false" /> 
  <arg name="task_id" default="" />
  <arg name="app_token" default="" />
  <arg name="app_token_key" default="" />
  <arg name="base_url" default="" />
  <arg name="task_finished_endpoint" default="" />
  <arg name="new_best_model_endpoint" default="" />

  <param name="is_webapp_docker" value="$(arg is_webapp_docker)" />
  <param name="task_id" value="$(arg task_id)" />
  <param name="app_token" value="$(arg app_token)" />
  <param name="app_token_key" value="$(arg app_token_key)" />
  <param name="base_url" value="$(arg base_url)" />
  <param name="task_finished_endpoint" value="$(arg task_finished_endpoint)" />
  <param name="new_best_model_endpoint" value="$(arg new_best_model_endpoint)" />

  <node name="task_progress_publisher" type="task_progress_publisher.py" pkg="task_progress_publisher" if="$(eval arg('is_webapp_docker') == true)" />
  <!-- -->

  <arg name="desired_resets" default="2" />
  <param name="desired_resets" value="$(arg desired_resets)" />


  <!-- ___________ ARGS ___________ -->
  <!-- You can launch a single robot and his local_planner with arguments -->
  <arg name="model" default="burger" doc="robot model type [burger, jackal, ridgeback, agvota, rto, ...]" />
  <arg name="local_planner" default="teb" doc="local planner type [teb, dwa, mpc, rlca, arena, rosnav]" />
  <arg name="environment" default="flatland" doc="[flatland, gazebo]" />

  <arg name="complexity" default="1" doc="1 = Map known, Position known; 2 = Map known, Position unknown (AMCL); 3 = Map unknown, Position unknown (SLAM)" />
  
  <env name="ENVIRONMENT" value="$(arg environment)" />

  <arg name="agent_name" default="$(arg model)"     doc = "DRL agent name to be deployed" unless="$(eval arg('local_planner') != 'rosnav')" />
  <!-- Or you can load a robot setup file to launch multiple robots in the same simulation -->
  <!-- If the robot_setup_file is specified it is always loaded -->
  <arg name="robot_setup_file" default="" doc="" />

  <arg name="record_data" default="false" />
  <param name="record_data" value="$(arg record_data)" />

  <param name="robot_setup_file" value="$(arg robot_setup_file)" />
  <param name="model" value="$(arg model)" />
  <param name="local_planner"  value="$(arg local_planner)"/>
  <param name="agent_name" value="$(arg agent_name)" unless="$(eval arg('local_planner') != 'rosnav')"/>

  <param name="complexity" value="$(arg complexity)" />
  

  <arg name="task_mode" default="random" doc="[random, staged, scenario]" />
  <arg name="visualization" default="rviz" doc="[rviz, flatland]" />
  <arg name="show_rviz" default="true" doc="Enables rviz in gazebo" />
  <arg name="rviz_file" default="nav"/>
  
  <arg name="auto_reset" default="true"/>

  <arg name="scenario_file" default="test_scenario.json" />
  <arg name="map_file" default="map_empty" doc="[map1, floor, indoor, indoor_map1, map_small, map_empty]" />
  <arg name="map_path" default="$(find arena-simulation-setup)/maps/$(arg map_file)/map.yaml" />

  <arg name="world_file" default="$(arg map_file)" />

  <!-- ___________ PARAMS ___________ -->
  <param name="use_sim_time" value="true"/>

  <param name="model" value="$(arg model)" />
  <param name="environment" value="$(arg environment)" />
  <param name="task_mode" value="$(arg task_mode)" />
  <param name="map_path" value="$(arg map_path)" />
  <param name="train_mode" value="false" />
  <param name="show_viz" value="$(arg show_rviz)"/>

  <rosparam command="load" file="$(find arena_bringup)/params/flatland.yaml" />

  <!-- TEST IF YOU NEED THIS -->
  <rosparam command="load" file="$(find arena-simulation-setup)/robot/$(arg model)/model_params.yaml" if="$(eval arg('robot_setup_file') == '')" /> 
  
  
  
  <!-- <param name="robot_yaml_path" value="$(find arena-simulation-setup)/robot/$(arg model)/$(arg model).model.yaml" /> -->
  <!-- <param name="tmp_model_path" value="/tmp" /> -->

  <!-- the folder name under the path arena-simulation-setup/maps  -->
  <param name="world_path" value="$(find arena-simulation-setup)/maps/$(arg map_file)/map.world.yaml" />
  <param name="map_layer_path" value="$(find arena-simulation-setup)/maps/$(arg map_file)/map_layer.yaml" />
  <param name="map_file" value="$(arg map_file)" />

  <!-- DRL action frequency -->
  <rosparam command="load" file="$(find arena_bringup)/params/drl.yaml" />

  <!-- Map parameters -->
  <arg name="global_frame_id" value="map" />
  <arg name="odom_frame_id" value="odom" />

  <param name="robot_name" value="$(arg model)" />

  <!-- data recorder -->
  <param name="scenario_file"  value="$(arg scenario_file)"/>

  <!-- use simulator-->

  <!-- Flatland -->
  <include file="$(find arena_bringup)/launch/testing//simulators/flatland.launch" if="$(eval arg('environment') == 'flatland')">
    <arg name="visualization" default="$(arg visualization)" />
    <arg name="rviz_file" value="$(arg rviz_file)" />
    <arg name="model" value="$(arg model)" />
    <arg name="show_rviz" value="$(arg show_rviz)" />
  </include>

  <!-- Gazebo -->
  <include file="$(find arena_bringup)/launch/testing/simulators/gazebo.launch" if="$(eval arg('environment') == 'gazebo')">
    <arg name="model" value="$(arg model)" />
    <arg name="rviz_file" value="$(arg rviz_file)" />
    <arg name="show_rviz" default="$(arg show_rviz)" />
    <arg name="headless" default="false" />
    <arg name="gui" default="true" />
    <arg name="world" default="$(arg world_file)" />
  </include>

  <!-- map server-->
  <include file="$(find arena_bringup)/launch/utils/map_server.launch">
    <arg name="map_path" value="$(arg map_path)" />
  </include>

  <!-- Fake localization-->
  <include file="$(find arena_bringup)/launch/utils/fake_localization.launch">
    <arg name="global_frame_id" value="$(arg global_frame_id)" />
    <arg name="odom_frame_id" value="$(arg odom_frame_id)" />
  </include>

  <include file="$(find arena_bringup)/launch/testing/task_generator.launch">
    <arg name="scenario_json_path" value="$(find task-generator)/scenarios/$(arg scenario_file)" />
    <arg name="auto_reset" value="$(arg auto_reset)" />
  </include>

  <!-- <node name="pedsim_simulator" pkg="pedsim_simulator" type="pedsim_simulator" output="screen">
    <param name="simulation_factor" value="1" type="double"/>
    <param name="pedsim_update_rate" value="30.0" type="double"/>
    <param name="scene_file" value="$(find arena-simulation-setup)/world/$(arg world_file)/scenarios/$(arg world_file).xml" type="string"/>
  </node>

  <node name="pedsim_visualizer" type="pedsim_visualizer_node" pkg="pedsim_visualizer"/> -->

  <!-- launch map generator if training with random map-->
  <!-- <group if="$(eval arg('map_file') == 'random_map')">
    <node pkg="arena-simulation-setup" name="map_generator_node" type="map_generator_node.py" />
  </group> -->

  <include file="$(find arena_bringup)/launch/testing/sensor_sim.launch">

  </include>

  <node type="create_config_file.py" pkg="rviz_utils" name="rviz_config_file_creator" />
  
  <node type="visualize_robot_model.py" pkg="rviz_utils" name="visualize_robot_model" output="screen" />
</launch>
